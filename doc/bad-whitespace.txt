*bad-whitespace.txt*   Highlights whitespace at the end of lines

http://www.vim.org/scripts/script.php?script_id=3735

Author:  Bit Connor <bit@mutantlemon.com>
Version: 0.3

Get the latest version at:
https://github.com/bitc/vim-bad-whitespace

Inspired by the trailing-whitespace script:
http://www.vim.org/scripts/script.php?script_id=3201

Additional References:
http://vim.wikia.com/wiki/Highlight_unwanted_spaces
http://sartak.org/2011/03/end-of-line-whitespace-in-vim.html

About ~

This plugin highlights whitespace at the end of lines with a red color.

You can erase the bad whitespace with the command |EraseBadWhitespace|

You can manually toggle the highlighting for the current buffer with the
commands |ShowBadWhitespace| |HideBadWhitespace| |ToggleBadWhitespace|

This plugin is better than using the builtin vim 'list' command because it
doesn't show an annoying highlight while you are typing in insert mode at the
end of a line.

This plugin is better than competing plugins because it doesn't show
highlighting in buffers that are not modifiable, which is usually what you
want. This makes it compatible with UI buffers that happen to contain bad
whitespace, such as the quickfix window, or the fugitive plugin.

                                                          *EraseBadWhitespace*

To erase the bad whitespace characters call :EraseBadWhitespace.  By default
it operates on the entire file.  Pass a range (or use V to select some lines)
to restrict the portion of the file that gets fixed.

                                                           *ShowBadWhitespace*

Enables bad whitespace highlighting for the current buffer.

                                                           *HideBadWhitespace*

Disables bad whitespace highlighting for the current buffer.

                                                         *ToggleBadWhitespace*

Toggles bad whitespace highlighting for the current buffer.

                                            *SetSearchPatternToBadWhitespace *

Write the bad-whitespace pattern for the current buffer to the last search
pattern register.  This way you can jump to an error by creating a mapping
like this: >
    nnoremap <Leader>W :<C-U>SetSearchPatternToBadWhitespace<CR>n
<

Configuration~                              *g:bad_whitespace_patch_filetypes*

You can suppress highlighting of the +/- columns in patch filetypes, by setting
the variable 'g:bad_whitespace_patch_filetypes'.  The column width is derived
from the number fo '@' characters introducing the hunk header.  The given value
in this example is the default: >
    let g:bad_whitespace_patch_filetypes = ['diff', 'git']
<

                                *g:bad_whitespace_alternative_color_filetypes*

Use the alternative color for the given filetypes.  The default is empty.
Example: >
    let g:bad_whitespace_alternative_color_filetypes = ['text', 'gitcommit']
<

                                              *g:bad_whitespace_off_filetypes*

Initially turn off bad-whitespace highlighting for the filetypes in this list.
Example: >
    let g:bad_whitespace_off_filetypes = ['text', 'markdown']
<

                                          *g:bad_whitespace_color_alt_default*

Specify the name of a color to be used for the alternative bad whitespace
highlighting.  The default uses a gray background.  Example: >
    let g:bad_whitespace_color_alt_default = 'Special'
<


                                *g:bad_whitespace_patch_column_width_fallback*

If the +/- column width could not be derived from the hunk header, this value
will be used.  The default is 0.

 vim:tw=78:et:ft=help:
